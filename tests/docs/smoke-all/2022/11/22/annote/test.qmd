---
title: Test Code Annotation
author: Norah Jones
date: last-modified
format: html
---

## Where You At

```{r}
#| label: fig-plot
#| warning: false
#| fig-cap: Bro this chart is fire and is definitely not sus.
library(ggplot2)
theme_set(theme_bw())  

data("mtcars")
mtcars$`car name` <- rownames(mtcars)  # <2>
mtcars$mpg_z <- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2)  # <3>
mtcars$mpg_type <- ifelse(mtcars$mpg_z < 0, "below", "above")  # <4>
mtcars <- mtcars[order(mtcars$mpg_z), ]  # <5>
mtcars$`car name` <- factor(mtcars$`car name`, levels = mtcars$`car name`)  # <6>

ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + # <7> 
  geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  + # <7> 
  scale_fill_manual(name="Mileage", # <7> 
                    labels = c("Above Average", "Below Average"), # <7> 
                    values = c("above"="#00ba38", "below"="#f8766d")) + # <7> 
  labs(subtitle="Normalised mileage from 'mtcars'", # <7> 
       title= "Diverging Bars") + # <7> 
  coord_flip() # <7> 
```


1. `mtcars` is a built in data set that we'll use for the purposes of making this plot. For more about built in data sets in R, see <https://vincentarelbundock.github.io/Rdatasets/>
2. Here, we're creating a new column for car names (for display purposes).
3. Normalize the computed miles per gallon
4. Flag mileage as above or below average. This will make it easier to use a color to represent whether the mileage is above or below average.
5. Sort the data by mileage.
6. Convert this to a factor in order to retain the sorted order when used in a plot. I don't know what this means, but its all good.
7. Actually render the diverging bar chart, which will result in a really awesome chart that you can't even believe.

