-- svg.lua
-- Copyright (C) 2021 by RStudio, PBC

local function convert_svg(path)
  local stem = pandoc.path.split_extension(path)
  local output = stem .. '.pdf'

  local status, results = pcall(pandoc.pipe, "rsvg-convert", {"-f", "pdf", "-a", "-o", output, path}, "")
  if status then
    return output
  else 
    if results['command'] == nil then
      -- command not found
      error("Failed when attempting to convert a SVG to a PDF for output. Please ensure that rsvg-convert is available on the path.")
      os.exit(1)
    else
      error("Failed when attempting to convert a SVG to a PDF for output. An error occurred while attempting to run rsvg-convert.\nError code " .. tostring(results['error_code']) )
      os.exit(1)
    end
  end
end

-- A cache of image urls that we've resolved into the mediabag
-- keyed by {url: mediabagpath}
local resolvedUrls = {}

function pdfImages() 
  return {
    -- convert SVG images to PDF when rendering PDFS
    Image = function(image)
      if quarto.doc.is_format("pdf") then
        if _quarto.file.exists(image.src) then
          -- If the src is pointing to a local file that is an svg, process it
          local ext = select(2, pandoc.path.split_extension(image.src))
          if ext == '.svg' then
            local convertedPath = convert_svg(image.src)
            if convertedPath then
              local contents = _quarto.file.read(convertedPath)
              local relativePath = pandoc.path.make_relative(convertedPath, '.')

              -- add to media bag and remove the converted file
              pandoc.mediabag.insert(relativePath, 'application/pdf', contents)
              _quarto.file.remove(relativePath)
              
              image.src = relativePath
              return image
            end
          end
        else
          -- See if the path points to an SVG in the media bag
          -- (been generated by a filter, for example)
          local mt, contents = pandoc.mediabag.lookup(image.src)
          if mt == 'image/svg+xml' then
            local result = pandoc.system.with_temporary_directory('svg-convert', function (tmpdir) 

              -- write the media bag contents to a temp file
              local filename = image.src
              local tempPath = pandoc.path.join({tmpdir, filename})
              local file = _quarto.file.write(tempPath, contents)
              
              if file then
                -- convert to svg
                local convertedPath = convert_svg(tempPath)
                if convertedPath then
                  -- compute the correct relative path to the newly created file
                  local mbPath = pandoc.path.make_relative(convertedPath, tmpdir, false)
                  local mbContents = _quarto.file.read(convertedPath)
                  
                  -- place the new file in the mediabag, remove the old
                  pandoc.mediabag.insert(mbPath, 'application/pdf', mbContents)
                  pandoc.mediabag.delete(filename)

                  -- update the path
                  image.src = mbPath
                  return image
                end
              end
              return nil
            end)
            return result
          elseif mt == nil then
            -- This file doesn't exist and isn't in the media bag
            -- see if it need to be fetched
            if resolvedUrls[image.src] then
              image.src = resolvedUrls[image.src]
              return image
            else 
              local relativePath = image.src:match('http[s]://[%w%.%:]+/(.+)')
              if relativePath then
                local imgMt, imgContents = pandoc.mediabag.fetch(image.src)
                local filename = pandoc.path.filename(relativePath)
                if imgMt ~= nil then
                  local existingMt = pandoc.mediabag.lookup(filename)
                  local counter = 1
                  while (existingMt) do
                    local stem, ext = pandoc.path.split_extension(filename)
                    filename = stem .. counter .. ext
                    existingMt = pandoc.mediabag.lookup(filename)
                  end
                  resolvedUrls[image.src] = filename
                  pandoc.mediabag.insert(filename, imgMt, imgContents)
                  image.src = filename
                  return image
                end
              end
            end
          end
        end
      end
    end
  }
end

